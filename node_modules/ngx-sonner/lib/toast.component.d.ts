import { AfterViewInit, ElementRef, OnDestroy } from '@angular/core';
import { cn } from './internal/cn';
import * as i0 from "@angular/core";
export declare class ToastComponent implements AfterViewInit, OnDestroy {
    protected readonly cn: typeof cn;
    toasts: import("@angular/core").Signal<import("./types").ToastT[]>;
    heights: import("@angular/core").Signal<import("./types").HeightT[]>;
    removeHeight: (id: number | string) => void;
    addHeight: (height: import("./types").HeightT) => void;
    dismiss: (id?: number | string) => string | number | undefined;
    toast: import("@angular/core").InputSignal<import("./types").ToastT>;
    index: import("@angular/core").InputSignal<number>;
    expanded: import("@angular/core").InputSignal<boolean>;
    _invert: import("@angular/core").InputSignal<boolean>;
    position: import("@angular/core").InputSignal<import("./types").Position>;
    visibleToasts: import("@angular/core").InputSignal<number>;
    expandByDefault: import("@angular/core").InputSignal<boolean>;
    _closeButton: import("@angular/core").InputSignal<boolean>;
    interacting: import("@angular/core").InputSignal<boolean>;
    cancelButtonStyle: import("@angular/core").InputSignal<string | undefined>;
    actionButtonStyle: import("@angular/core").InputSignal<string | undefined>;
    duration: import("@angular/core").InputSignal<number | null>;
    descriptionClass: import("@angular/core").InputSignal<string>;
    _classes: import("@angular/core").InputSignal<import("./types").ToastClassnames>;
    unstyled: import("@angular/core").InputSignal<boolean>;
    _class: import("@angular/core").InputSignal<string>;
    _style: import("@angular/core").InputSignal<Record<string, string>>;
    mounted: import("@angular/core").WritableSignal<boolean>;
    removed: import("@angular/core").WritableSignal<boolean>;
    swiping: import("@angular/core").WritableSignal<boolean>;
    swipeOut: import("@angular/core").WritableSignal<boolean>;
    offsetBeforeRemove: import("@angular/core").WritableSignal<number>;
    initialHeight: import("@angular/core").WritableSignal<number>;
    toastRef: import("@angular/core").Signal<ElementRef<HTMLLIElement>>;
    classes: any;
    isFront: import("@angular/core").Signal<boolean>;
    isVisible: import("@angular/core").Signal<boolean>;
    toastType: import("@angular/core").Signal<import("./types").ToastTypes>;
    toastClass: import("@angular/core").Signal<string>;
    toastPosition: import("@angular/core").Signal<import("./types").Position>;
    toastDescriptionClass: import("@angular/core").Signal<string>;
    heightIndex: import("@angular/core").Signal<number>;
    offset: import("@angular/core").WritableSignal<number>;
    closeTimerStartTimeRef: number;
    lastCloseTimerStartTimeRef: number;
    pointerStartRef: {
        x: number;
        y: number;
    } | null;
    coords: import("@angular/core").Signal<string[]>;
    toastsHeightBefore: import("@angular/core").Signal<number>;
    invert: import("@angular/core").Signal<boolean>;
    closeButton: import("@angular/core").Signal<boolean>;
    disabled: import("@angular/core").Signal<boolean>;
    timeoutId: ReturnType<typeof setTimeout> | undefined;
    remainingTime: number;
    isPromiseLoadingOrInfiniteDuration: import("@angular/core").Signal<boolean>;
    toastClasses: import("@angular/core").Signal<string>;
    toastStyle: import("@angular/core").Signal<{
        '--index': string;
        '--toasts-before': string;
        '--z-index': string;
        '--offset': string;
        '--initial-height': string;
    }>;
    constructor();
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    deleteToast(): void;
    pauseTimer(): void;
    startTimer(): void;
    onPointerDown(event: PointerEvent): void;
    onPointerUp(): void;
    onPointerMove(event: PointerEvent): void;
    onCloseButtonClick(): void;
    onCancelClick(): void;
    onActionClick(event: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ToastComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ToastComponent, "ngx-sonner-toast", never, { "toast": { "alias": "toast"; "required": true; "isSignal": true; }; "index": { "alias": "index"; "required": true; "isSignal": true; }; "expanded": { "alias": "expanded"; "required": true; "isSignal": true; }; "_invert": { "alias": "invert"; "required": true; "isSignal": true; }; "position": { "alias": "position"; "required": true; "isSignal": true; }; "visibleToasts": { "alias": "visibleToasts"; "required": true; "isSignal": true; }; "expandByDefault": { "alias": "expandByDefault"; "required": true; "isSignal": true; }; "_closeButton": { "alias": "closeButton"; "required": true; "isSignal": true; }; "interacting": { "alias": "interacting"; "required": true; "isSignal": true; }; "cancelButtonStyle": { "alias": "cancelButtonStyle"; "required": false; "isSignal": true; }; "actionButtonStyle": { "alias": "actionButtonStyle"; "required": false; "isSignal": true; }; "duration": { "alias": "duration"; "required": false; "isSignal": true; }; "descriptionClass": { "alias": "descriptionClass"; "required": false; "isSignal": true; }; "_classes": { "alias": "classes"; "required": false; "isSignal": true; }; "unstyled": { "alias": "unstyled"; "required": false; "isSignal": true; }; "_class": { "alias": "class"; "required": false; "isSignal": true; }; "_style": { "alias": "style"; "required": false; "isSignal": true; }; }, {}, never, ["[loading-icon]", "[success-icon]", "[error-icon]", "[warning-icon]", "[info-icon]"], true, never>;
}

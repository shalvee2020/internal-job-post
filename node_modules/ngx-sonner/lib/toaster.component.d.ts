import { ElementRef, OnDestroy } from '@angular/core';
import { Position, Theme, ToasterProps } from './types';
import * as i0 from "@angular/core";
export declare class NgxSonnerToaster implements OnDestroy {
    private readonly platformId;
    toasts: import("@angular/core").Signal<import("./types").ToastT[]>;
    heights: import("@angular/core").Signal<import("./types").HeightT[]>;
    reset: () => void;
    invert: import("@angular/core").InputSignalWithTransform<boolean, string | boolean>;
    theme: import("@angular/core").InputSignal<"light" | "dark" | "system">;
    position: import("@angular/core").InputSignal<Position>;
    hotKey: import("@angular/core").InputSignal<string[]>;
    richColors: import("@angular/core").InputSignalWithTransform<boolean, string | boolean>;
    expand: import("@angular/core").InputSignalWithTransform<boolean, string | boolean>;
    duration: import("@angular/core").InputSignalWithTransform<number, string | number>;
    visibleToasts: import("@angular/core").InputSignalWithTransform<number, string | number>;
    closeButton: import("@angular/core").InputSignalWithTransform<boolean, string | boolean>;
    toastOptions: import("@angular/core").InputSignal<import("./types").ToastOptions>;
    offset: import("@angular/core").InputSignal<string | number | null>;
    dir: import("@angular/core").InputSignal<"ltr" | "rtl" | "auto">;
    _class: import("@angular/core").InputSignal<string>;
    _style: import("@angular/core").InputSignal<Record<string, string>>;
    possiblePositions: import("@angular/core").Signal<Position[]>;
    expanded: import("@angular/core").WritableSignal<boolean>;
    actualTheme: import("@angular/core").WritableSignal<Theme>;
    interacting: import("@angular/core").WritableSignal<boolean>;
    listRef: import("@angular/core").Signal<ElementRef<HTMLOListElement> | undefined>;
    lastFocusedElementRef: import("@angular/core").WritableSignal<HTMLElement | null>;
    isFocusWithinRef: import("@angular/core").WritableSignal<boolean>;
    hotKeyLabel: import("@angular/core").Signal<string>;
    toasterStyles: import("@angular/core").Signal<{
        '--front-toast-height': string;
        '--offset': string | number;
        '--width': string;
        '--gap': string;
    }>;
    constructor();
    ngOnDestroy(): void;
    handleBlur(event: FocusEvent): void;
    handleFocus(event: FocusEvent): void;
    handlePointerDown(event: MouseEvent): void;
    handleMouseLeave(): void;
    private handleKeydown;
    private handleThemePreferenceChange;
    private getActualTheme;
    getDocumentDirection(): ToasterProps['dir'];
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxSonnerToaster, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxSonnerToaster, "ngx-sonner-toaster", never, { "invert": { "alias": "invert"; "required": false; "isSignal": true; }; "theme": { "alias": "theme"; "required": false; "isSignal": true; }; "position": { "alias": "position"; "required": false; "isSignal": true; }; "hotKey": { "alias": "hotKey"; "required": false; "isSignal": true; }; "richColors": { "alias": "richColors"; "required": false; "isSignal": true; }; "expand": { "alias": "expand"; "required": false; "isSignal": true; }; "duration": { "alias": "duration"; "required": false; "isSignal": true; }; "visibleToasts": { "alias": "visibleToasts"; "required": false; "isSignal": true; }; "closeButton": { "alias": "closeButton"; "required": false; "isSignal": true; }; "toastOptions": { "alias": "toastOptions"; "required": false; "isSignal": true; }; "offset": { "alias": "offset"; "required": false; "isSignal": true; }; "dir": { "alias": "dir"; "required": false; "isSignal": true; }; "_class": { "alias": "class"; "required": false; "isSignal": true; }; "_style": { "alias": "style"; "required": false; "isSignal": true; }; }, {}, never, ["[loading-icon]", "[success-icon]", "[error-icon]", "[warning-icon]", "[info-icon]"], true, never>;
}

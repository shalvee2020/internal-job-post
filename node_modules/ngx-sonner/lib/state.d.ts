import { Type } from '@angular/core';
import { ExternalToast, HeightT, PromiseData, PromiseT, ToastT, ToastTypes } from './types';
export declare const toastState: {
    create: (data: ExternalToast & {
        message?: string | Type<unknown>;
        type?: ToastTypes;
        promise?: PromiseT;
    }) => string | number;
    addToast: (data: ToastT) => void;
    dismiss: (id?: number | string) => string | number | undefined;
    message: (message: string | Type<unknown>, data?: ExternalToast) => string | number;
    error: (message: string | Type<unknown>, data?: ExternalToast) => string | number;
    success: (message: string | Type<unknown>, data?: ExternalToast) => string | number;
    info: (message: string | Type<unknown>, data?: ExternalToast) => string | number;
    warning: (message: string | Type<unknown>, data?: ExternalToast) => string | number;
    loading: (message: string | Type<unknown>, data?: ExternalToast) => string | number;
    promise: <ToastData>(promise: PromiseT<ToastData>, data?: PromiseData<ToastData>) => string | number | undefined;
    custom: <T>(component: Type<T>, data?: ExternalToast) => string | number;
    removeHeight: (id: number | string) => void;
    addHeight: (height: HeightT) => void;
    reset: () => void;
    toasts: import("@angular/core").Signal<ToastT[]>;
    heights: import("@angular/core").Signal<HeightT[]>;
};
declare function toastFunction(message: string | Type<unknown>, data?: ExternalToast): string | number;
export declare const toast: typeof toastFunction & {
    success: (message: string | Type<unknown>, data?: ExternalToast) => string | number;
    info: (message: string | Type<unknown>, data?: ExternalToast) => string | number;
    warning: (message: string | Type<unknown>, data?: ExternalToast) => string | number;
    error: (message: string | Type<unknown>, data?: ExternalToast) => string | number;
    custom: <T>(component: Type<T>, data?: ExternalToast) => string | number;
    message: (message: string | Type<unknown>, data?: ExternalToast) => string | number;
    promise: <ToastData>(promise: PromiseT<ToastData>, data?: PromiseData<ToastData>) => string | number | undefined;
    dismiss: (id?: number | string) => string | number | undefined;
    loading: (message: string | Type<unknown>, data?: ExternalToast) => string | number;
};
export {};
